{
	"results": [
		{
			"id": 1001,
			"task": 1,
			"question": "A company is migrating a legacy application to Amazon EC2 instances. The application uses a user name and password that are stored in the source code to connect to a MySQL database. The company will migrate the database to an Amazon RDS for MySQL DB instance. As part of the migration, the company needs to implement a secure way to store and automatically rotate the database credentials.",
			"incorrect_answers": [
				"Store the database credentials in environment variables in an Amazon Machine Image (AMI). Rotate the credentials by replacing the AMI",
				"Store the database credentials in AWS Systems Manager Parameter Store. Configure Parameter Store to automatically rotate the credentials.",
				"Store the database credentials in environment variables on the EC2 instances. Rotate the credentials by relaunching the EC2 instances."
			],
			"correct_answers": ["Store the database credentials in AWS Secrets Manager. Configure Secrets Manager to automatically rotate the credentials."],
			"c5": 0,
			"hint": "AWS Secrets Manager helps protect the credentials that are needed to access databases, applications, services, and other IT resources. With Secrets Manager, you can rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Users and applications retrieve secrets by making a Secrets Manager API call, eliminating the need to hardcode sensitive information in plaintext. Secrets Manager offers secret rotation with built-in integration for Amazon RDS, Amazon Redshift, and Amazon DocumentDB (with MongoDB compatibility).",
			"c7": 9418
		},
		{
			"id": 1002,
			"task": 1,
			"question": "A developer is creating a web application that must give users the ability to post comments and receive feedback in near real time.\nWhich solutions will meet these requirements? (Select TWO.)",
			"incorrect_answers": [
				"Create an AWS Elastic Beanstalk application that is backed by an Amazon RDS database. Configure the application to allow long-lived TCP/IP sockets.",
				"Create a GraphQL endpoint in Amazon API Gateway. Use an Amazon DynamoDB table as the data store.",
				"Establish WebSocket connections to Amazon CloudFront. Use an AWS Lambda function as the CloudFront distribution's origin. Use an Amazon Aurora DB cluster as the data store."
			],
			"correct_answers": [
				"Create an AWS AppSync schema and corresponding APIs. Use an Amazon DynamoDB table as the data store.",
				"Create a WebSocket API in Amazon API Gateway. Use an AWS Lambda function as the backend. Use an Amazon DynamoDB table as the data store."
			],
			"c5": 0,
			"hint": "AWS AppSync simplifies application development by giving you the ability to create a flexible API to securely access, manipulate, and combine data from one or more data sources. AWS AppSync is a managed service that uses GraphQL to help applications get the exact data that they need. You can use AWS AppSync to build scalable applications that require real-time updates on a range of data sources, including Amazon DynamoDB. In Amazon API Gateway, you can create a WebSocket API as a stateful frontend for an AWS service (such as AWS Lambda or DynamoDB) or for an HTTP endpoint. The WebSocket API invokes the backend based on the content of the messages that the API receives from client applications. Unlike a REST API, which receives and responds to requests, a WebSocket API supports two-way communication between client applications and the backend.",
			"c7": 1223
		},
		{
			"id": 1003,
			"task": 1,
			"question": "A developer is adding sign-up and sign-in functionality to an application. The application must make an API call to a custom analytics solution to log user sign-in events. Which combination of actions should the developer perform to meet these requirements? (Select TWO.)",
			"incorrect_answers": [
				"Use AWS Identity and Access Management (IAM) to provide the sign-up and sign-in functionality.",
				"Configure an AWS Config rule to make the API call when a user is authenticated.",
				"Invoke an Amazon API Gateway method to make the API call when a user is authenticated."
			],
			"correct_answers": [
				"Use Amazon Cognito to provide the sign-up and sign-in functionality.", 
				"Invoke an AWS Lambda function to make the API call when a user is authenticated."],
			"c5": 0,
			"hint": "Amazon Cognito adds user sign-up, sign-in, and access control to web and mobile applications. You can also create an AWS Lambda function to make an API call to a custom analytics solution and then invoke that function by using an Amazon Cognito post authentication trigger.",
			"c7": 0
		}
	]
}
